# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VworldReverseGeocoding
                                 A QGIS plugin
 Obtaining address information using the VWorld reverse geocoding API based on the coordinates (longitude, latitude) of a point feature class.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-15
        git sha              : $Format:%H$
        copyright            : (C) 2025 by KIM SUNGHYUN/Geogreen21 Co.
        email                : shk7773@naver.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

VworldReverseGeocoding Plugin
Integrates UI and performs VWorld reverse geocoding on selected point layer.
Dialog stays on top and adds POINT_X, POINT_Y coordinates.
"""
import os
import os.path
from pathlib import Path
import requests
from qgis.PyQt.QtCore import QCoreApplication, QVariant, Qt
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QDialog, QFileDialog
from qgis.PyQt.QtGui import QColor, QIcon, QPainter, QPixmap
# Ensure resources are imported (compiled from resources.qrc)
from . import resources
from qgis.core import QgsVectorLayer, QgsField, QgsProject, QgsWkbTypes
from .VWorldRevGeocd_dialog import VworldReverseGeocodingDialog

class VworldReverseGeocoding:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.actions = []
        self.menu = self.tr('&VWorld Reverse Geocoding')
        self.first_start = True

    def tr(self, message):
        return QCoreApplication.translate('VworldReverseGeocoding', message)

    def add_action(self, icon_path, text, callback, parent=None):
        action = QAction(text, parent)
        action.triggered.connect(callback)
        self.iface.addPluginToMenu(self.menu, action)
        self.iface.addToolBarIcon(action)
        self.actions.append(action)
        return action

    def initGui(self):
        icon = QIcon(str(Path(__file__).parent / "icon.png"))#':/plugins/vworldrevgeocd/icon.png'
        self.add_action(icon, self.tr('Reverse Geocoding Tool'), self.run, self.iface.mainWindow())

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(self.menu, action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if self.first_start:
            self.dlg = VworldReverseGeocodingDialog()
            self.dlg.setWindowFlags(self.dlg.windowFlags() | Qt.WindowStaysOnTopHint)
            self.dlg.open_path_point.clicked.connect(self.loadPointLayer)
            self.first_start = False

        self.dlg.setModal(True)
        self.dlg.show()
        result = self.dlg.exec_()
        if result != QDialog.Accepted:
            return

        layer = self.dlg.input_point.currentLayer()
        key_file = self.dlg.API_key.filePath()

        # Validate inputs
        if not layer or not isinstance(layer, QgsVectorLayer) or layer.geometryType() != QgsWkbTypes.PointGeometry:
            QMessageBox.warning(self.iface.mainWindow(), self.tr('Input Error'), self.tr('Please select a valid point layer.'))
            return
        if not key_file or not os.path.isfile(key_file):
            QMessageBox.warning(self.iface.mainWindow(), self.tr('Input Error'), self.tr('Please select a valid API key file.'))
            return

        # Read API key
        try:
            with open(key_file, 'r') as f:
                api_key = f.read().strip()
        except Exception as e:
            QMessageBox.critical(self.iface.mainWindow(), self.tr('Error'), self.tr(f'Failed to read API key: {e}'))
            return

        # Start editing
        if not layer.isEditable():
            layer.startEditing()

        provider = layer.dataProvider()
        field_names = [fld.name() for fld in layer.fields()]
        new_fields = []
        if 'POINT_X' not in field_names:
            new_fields.append(QgsField('POINT_X', QVariant.Double))
        if 'POINT_Y' not in field_names:
            new_fields.append(QgsField('POINT_Y', QVariant.Double))
        if 'address' not in field_names:
            new_fields.append(QgsField('address', QVariant.String))
        if new_fields:
            provider.addAttributes(new_fields)
            layer.updateFields()

        x_idx = layer.fields().indexOf('POINT_X')
        y_idx = layer.fields().indexOf('POINT_Y')
        addr_idx = layer.fields().indexOf('address')

        api_url = 'https://api.vworld.kr/req/address'
        base_params = {
            'service': 'address',
            'request': 'getaddress',
            'format': 'json',
            'crs': 'epsg:4326',
            'type': 'parcel',
            'key': api_key
        }

        for feat in layer.getFeatures():
            pt = feat.geometry().asPoint()
            px, py = pt.x(), pt.y()
            params = base_params.copy()
            params['point'] = f"{px},{py}"
            address = None
            try:
                resp = requests.get(api_url, params=params, timeout=10)
                resp.raise_for_status()
                data = resp.json()
                result_data = data.get('response', {}).get('result')
                if isinstance(result_data, list) and result_data:
                    address = result_data[0].get('text')
                elif isinstance(result_data, dict):
                    address = result_data.get('text')
            except Exception as e:
                self.iface.messageBar().pushWarning(self.tr('Geocoding failed'), f"{px},{py}: {e}")

            layer.changeAttributeValue(feat.id(), x_idx, px)
            layer.changeAttributeValue(feat.id(), y_idx, py)
            layer.changeAttributeValue(feat.id(), addr_idx, address)

        layer.commitChanges()

        QMessageBox.information(self.iface.mainWindow(), self.tr('Done'), self.tr('Reverse geocoding completed.'))

    def loadPointLayer(self):
        path, _ = QFileDialog.getOpenFileName(
            self.iface.mainWindow(),
            self.tr('Select Point Feature'),
            '',
            'Point vector files (*.shp *.gdb)'
        )
        if not path:
            return
        layer = QgsVectorLayer(path, os.path.basename(path), 'ogr')
        if not layer.isValid():
            QMessageBox.warning(self.iface.mainWindow(), self.tr('Error'), self.tr('Failed to load layer.'))
            return
        QgsProject.instance().addMapLayer(layer)
        self.dlg.input_point.setLayer(layer)
